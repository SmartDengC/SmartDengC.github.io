import{_ as o,r as t,o as r,c as s,a as e,d as n,b as c,e as l}from"./app-BhrpVKwE.js";const d={},p=e("p",null,"今天在刷算法的时候，遇到一个问题需要用到贪心算法来求解，这里就详细了解一下什么是贪心算法？什么情况下会用到贪心算法？顺带举几个贪心算法典型的例子来说明。",-1),h=e("blockquote",null,[e("p",null,"说白了，贪心算法可以理解为一种特殊的动态规划问题，拥有一些更特殊的性质，可以进一步降低动态规划算法的时间复杂度。 -- labuladong")],-1),i={href:"https://labuladong.online/algo/frequency-interview/interval-scheduling/",target:"_blank",rel:"noopener noreferrer"},_=l('<h2 id="什么是贪心算法" tabindex="-1"><a class="header-anchor" href="#什么是贪心算法"><span>什么是贪心算法？</span></a></h2><p>贪心算法主要的目的就是寻求<strong>最优解问题</strong>，这种方法模式一般将求解过程分成若干个步骤，每一个步骤都应用贪心原则，选取当前状态下<strong>最好/最优的选择</strong>，</p><h2 id="为什么要用贪心算法" tabindex="-1"><a class="header-anchor" href="#为什么要用贪心算法"><span>为什么要用贪心算法？</span></a></h2><p>我们知道贪心算法的目的，那样的话，我们就清楚在什么情况下使用谈心算法，像是背包问题（背包重量一定，选择最有价值的物品放入到背包中），或者是找零问题（在一定面额的硬币中选择最少得硬币来凑出一个指定的金额）。</p><h2 id="解决贪心算法过程" tabindex="-1"><a class="header-anchor" href="#解决贪心算法过程"><span>解决贪心算法过程</span></a></h2><p>1、从某个初始解开始</p><p>2、采取迭代的过程，当可以向目标前进一步是，就根据局部最优解策略，得到一部分解，缩小问题规模</p><p>3、将所有解综合起来</p>',8);function u(f,x){const a=t("ExternalLinkIcon");return r(),s("div",null,[p,h,e("p",null,[n("参考 "),e("a",i,[n("贪心算法之区间调度问题"),c(a)])]),_])}const b=o(d,[["render",u],["__file","index.html.vue"]]);export{b as default};

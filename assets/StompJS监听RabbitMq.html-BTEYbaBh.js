import{_ as n,o as s,c as a,e as t}from"./app-o_M_CjLp.js";const p={},e=t(`<p>昨天在开发的过程中遇到一个问题，就是用stompjs写的vue代码出来的页面，不能开多个客户端来监听同一个队列的问题。</p><p>这里有衍生出来另外一个问题，就是mq这里定义的是一个交换机，stompjs实际是写的交换机的名称。 就是mq在向交换机里面发消息的时候，如果没有绑定队列的话，在消费消息的时候会生成一个临时的队列，问题就出在这里，再用stompjs连接的时候，默认给这个队列起了一个名称，导致另外客户端在请求的时候，生成不了相同名称的队列，导致的问题。 下面我们来看一下具体的代码。</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>RabbitMQ Web STOMP Examples : Echo Server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF‐8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>js/stomp.min.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">var</span> client <span class="token operator">=</span> Stomp<span class="token punctuation">.</span><span class="token function">client</span><span class="token punctuation">(</span><span class="token string">&#39;ws://116.147.36.xxx:15674/ws&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> <span class="token function-variable function">on_connect</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        id <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">&quot;/exchange/test_exchange&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">alert</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> <span class="token function-variable function">on_error</span> <span class="token operator">=</span>  <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    client<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">&#39;guest&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;guest&#39;</span><span class="token punctuation">,</span> on_connect<span class="token punctuation">,</span> on_error<span class="token punctuation">,</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后是项目上的代码 在回调函数里面写的。</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>{&quot;x-queue-name&quot;:“\${url}777，durable: true}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>队列的排他性的研究</strong> 开始以为是要个交换机设置排他性为false，但是找了一圈发现只能在队列上面设置，但是队列又是自动生成的，所以这里方向不对。</p><p>这里简单描述一下给队列设置排他性，简单学习一下交换机的定义参数和队列的定义参数</p><p>排他性的简单描述</p><p>https://blog.csdn.net/Lvlht/article/details/105603254</p><hr><p><strong>为什么要用exclusive(true)</strong> 如果你想创建一个只有自己可见的队列，即不允许其他用户访问，rabbitmq允许你讲queue声明成为排他性的</p><p><strong>排他性队列的特性</strong></p><ul><li>声明exclusive属性的队列只对首次声明他的连接可见，并且在连接断开时自动删除</li><li>针对连接可见，只要是当前connection下的信道可以访问</li><li>一旦该队列被声明，其他链接无法声明相同名称的排他队列，其他链接的通道也无法绑定此队列</li><li>队列即使显示的声明为durable，连接断开时也会被自动删掉</li></ul><p><strong>使用场景</strong> 系统内部进程调用，生产者和消费者在同一个系统内。</p>`,14),c=[e];function o(l,u){return s(),a("div",null,c)}const k=n(p,[["render",o],["__file","StompJS监听RabbitMq.html.vue"]]);export{k as default};

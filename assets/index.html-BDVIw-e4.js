import{_ as s,r as t,o as i,c as n,a as e,d as c,b as o,e as l}from"./app-BhrpVKwE.js";const d={},r=l(`<p>使用 git 也很多年了，但是每次 commit 的时候，都是随便提交写一些 commit, 像是<code>git commit -m &#39;111&#39;</code>(这个不是我写的哈，是我看见别人这样提交的)，有的时候我都会看到 commit 的信息是 1，像这种情况追溯的时候肯定是不行的。</p><p>所以提交 commit 的时候需要规范。</p><h2 id="一、commit-message-的作用" tabindex="-1"><a class="header-anchor" href="#一、commit-message-的作用"><span>一、Commit Message 的作用</span></a></h2><p>格式化的 commit message 有几个好处</p><h3 id="_1、提供更多的历史信息-方便快速浏览" tabindex="-1"><a class="header-anchor" href="#_1、提供更多的历史信息-方便快速浏览"><span>1、提供更多的历史信息，方便快速浏览</span></a></h3><p>比如，下面的命令显示上次发布后的变动，每个 commit 占据一行。你只看首行，就知道每次 commit 的目的。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>git log &lt;last tag&gt; HEAD --pretty=format:%s</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2、可以过滤某些-commit-比如文档改动-便于快速查找信息" tabindex="-1"><a class="header-anchor" href="#_2、可以过滤某些-commit-比如文档改动-便于快速查找信息"><span>2、可以过滤某些 commit（比如文档改动），便于快速查找信息</span></a></h3><p>比如下面的命令仅仅展示本次发布新增的功能</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>git log &lt;last release&gt; HEAD --grep feature</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3、可以直接从-commit-生成-change-log" tabindex="-1"><a class="header-anchor" href="#_3、可以直接从-commit-生成-change-log"><span>3、可以直接从 commit 生成 change log</span></a></h3><p>change log 是发布新版本的时候，用来说明与上一个版本差异的文档。</p><h2 id="二、commit-message-的格式" tabindex="-1"><a class="header-anchor" href="#二、commit-message-的格式"><span>二、Commit Message 的格式</span></a></h2><p>每次提交，commit message 都包含三个部分： header body 和 footer</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;// 空一行&lt;body&gt;// 空一行&lt;footer&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1、header" tabindex="-1"><a class="header-anchor" href="#_1、header"><span>1、Header</span></a></h3><p>header 部分只有一行，包括三个字段， type 必需、scope 可选和 subject 必需</p><h4 id="type" tabindex="-1"><a class="header-anchor" href="#type"><span>type</span></a></h4><p>type 用于说明 commit 的类别，只允许使用下面 7 个标识</p><ul><li>feat：新功能（feature）</li><li>fix：修补 bug</li><li>docs：文档（documentation）</li><li>style：格式（不影响代码运行的变动）</li><li>refactor：重构（既不新增功能，也不修改 bug 的代码改动）</li><li>test：增加测试</li><li>chore：构建过程和辅助工具的变动 如果 type 为 feat 和 fix，则该 commit 将可定出现在 change log 之中。其他情况自己决定要不要放到 change log，建议不要。</li></ul><h4 id="scope" tabindex="-1"><a class="header-anchor" href="#scope"><span>scope</span></a></h4><p>scope 用于说明 commit 影响的范围，比如数据层、控制层、视图层等等</p><h4 id="subject" tabindex="-1"><a class="header-anchor" href="#subject"><span>subject</span></a></h4><p>subject 是 commit 目的的简短描述，不超过 50 个字符。</p><ul><li>以动词开头，使用第一人称现在是，比如 change， 而不是 changed 或者 changes</li><li>第一个字母小写</li><li>结尾不加句号</li></ul><h3 id="_2、body" tabindex="-1"><a class="header-anchor" href="#_2、body"><span>2、body</span></a></h3><p>body 部分是对本次 commit 的详细描述，可以分成多行。下面是一个范例</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>More detailed explanatory text, if necessary.  Wrap it to</span></span>
<span class="line"><span>about 72 characters or so. Further paragraphs come after blank lines.- Bullet points are okay, too- Use a hanging indent</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>有两点注意：</p><ul><li>使用第一人称现在是，比如使用 change，而不是 changed 或 changes</li><li>应该说明代码的变更动机，以及与前行为的对比。</li></ul><h3 id="_3、footer" tabindex="-1"><a class="header-anchor" href="#_3、footer"><span>3、footer</span></a></h3><p>footer 部分只用于两种情况</p><ul><li>不兼容变动，如果当前代码与上一个版本不兼容，则 footer 部分以 BREAKING CHANGE 开头，后面是对变动的描述。</li><li>关闭 issue，如果当前 commit 针对某一个 issue，那么可以在 footer 部分关闭这个 issue <code>Closes #234, #245</code></li></ul><h2 id="三、commitizen" tabindex="-1"><a class="header-anchor" href="#三、commitizen"><span>三、Commitizen</span></a></h2><p>commitizen 是一个撰写合格 commit message 的工具。 安装命令：<code>npm install -g commitizen</code> 然后在项目目录里面，运行下面的命令，使其支持 Angular 的 commit message 格式。<code>commitizen init cz-conventional-changelog --save --save-exact</code> 以后，范式用到 git commit 命令，一律改为使用 git cz，这样就会出现相应的选项用来生成符合条件的 commit message 信息。</p><h2 id="四、参考文章" tabindex="-1"><a class="header-anchor" href="#四、参考文章"><span>四、参考文章</span></a></h2>`,36),m={href:"https://developer.aliyun.com/article/441408",target:"_blank",rel:"noopener noreferrer"};function p(h,g){const a=t("ExternalLinkIcon");return i(),n("div",null,[r,e("p",null,[e("a",m,[c("Git 提交的正确姿势：Commit message 编写指南"),o(a)])])])}const v=s(d,[["render",p],["__file","index.html.vue"]]);export{v as default};
